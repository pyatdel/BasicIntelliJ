Spring MVC 심화 개념
1. Mustache 템플릿 문법
1.1 기본 문법
htmlCopy<!-- 단일 객체 표시 -->
<tr>
    <th>{{id}}</th>
    <th>{{name}}</th>
</tr>

<!-- 반복 처리 -->
{{#articles}}
    <tr>
        <td>{{id}}</td>
        <td>{{title}}</td>
    </tr>
{{/articles}}
2. 데이터 흐름도
2.1 목록 조회 프로세스
CopyBrowser (/articles 요청)
    ↓
Controller (findAll() 메서드)
    ↓
Repository (DB 조회)
    ↓
Database
    ↓
List<Entity> 반환
    ↓
View 매핑
    ↓
Browser 응답
2.2 Repository와 Entity 관계
javaCopy@Repository
public interface ArticleRepository
    extends JpaRepository<Article, Long> {
    // Article: 엔티티 타입
    // Long: PK 타입
}
3. 객체 계층 구조와 캐스팅
3.1 계층 구조
CopyIterable (생물)
    ↓
Collection (동물)
    ↓
List (고양이)
    ↓
ArrayList
3.2 캐스팅 예시
javaCopy// 업캐스팅 (좁은 범위 → 넓은 범위)
List<String> list = new ArrayList<>();
Collection<String> collection = list;
Iterable<String> iterable = collection;

// 다운캐스팅 (넓은 범위 → 좁은 범위)
Iterable<String> iterable = new ArrayList<>();
List<String> list = (List<String>) iterable;
4. URL 매핑과 페이지 이동
4.1 기본 URL 구조
Copy/articles        → index (목록)
/articles/new    → new (생성)
/articles/{id}   → show (상세)
4.2 페이지 이동 방식
htmlCopy<!-- <a> 태그를 통한 이동 -->
<a href="/articles/{{id}}">상세보기</a>

<!-- form을 통한 이동 -->
<form action="/articles/create" method="post">
    <!-- 폼 내용 -->
</form>
5. 리다이렉트 프로세스
5.1 흐름도
CopyBrowser → Server (요청)
    ↓
Server → Browser (재요청 지시)
    ↓
Browser → Server (재요청)
    ↓
Server → Browser (최종 응답)
5.2 구현
javaCopy@PostMapping("/articles/create")
public String create(ArticleForm form) {
    // 저장 로직
    return "redirect:/articles";  // 목록 페이지로 리다이렉트
}
6. HTTP 메서드와 CRUD
6.1 매핑 관계
javaCopy// Create: POST
@PostMapping("/articles/create")
public String create() { ... }

// Read: GET
@GetMapping("/articles/{id}")
public String show() { ... }

// Update: PATCH/PUT
@PatchMapping("/articles/{id}")
public String update() { ... }

// Delete: DELETE
@DeleteMapping("/articles/{id}")
public String delete() { ... }
6.2 수정 프로세스
Copy상세 페이지
    ↓
수정 페이지 요청
    ↓
엔티티로 DB 작업
    ↓
리파지터리로 데이터 갱신
    ↓
수정된 데이터 반영
7. 주요 코드 예시
7.1 컨트롤러
javaCopy@Controller
public class ArticleController {
    @GetMapping("/articles/{id}/edit")
    public String edit(@PathVariable Long id, Model model) {
        // 수정할 데이터 조회
        Article articleEntity = articleRepository.findById(id).orElse(null);

        // 모델에 데이터 등록
        model.addAttribute("article", articleEntity);

        // 뷰 페이지 설정
        return "articles/edit";
    }
}
7.2 수정 폼
htmlCopy<form action="/articles/update" method="post">
    <input type="hidden" name="_method" value="patch"/>
    <input type="text" name="title" value="{{article.title}}"/>
    <textarea name="content">{{article.content}}</textarea>
    <button type="submit">수정</button>
</form>

post c
get r
patch(put) u
delete d

Spring MVC는 Mustache 템플릿을 사용하여 화면을 구성하고,
브라우저의 요청을 Controller가 처리하여 Repository를 통해
데이터베이스와 상호작용하며, HTTP 메서드
(GET/조회, POST/생성, PATCH/수정, DELETE/삭제)를 통해
CRUD 작업을 수행합니다.
