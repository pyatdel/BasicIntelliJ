빌드(build)란 소스 코드를 실행할 수 있는 독립적인 형태로 만드는 것을 말함. 
즉, 프로젝트를 빌드하면 독립된 파일이 생성되고 
이를 실행해 프로젝트에 작성한 기능들을 이용할 수 있음.

프로젝트 탐색기를 통해 프로젝트 구조를 탐색하고 특정 파일을 바로 열 수 있음. 
프로젝트 탐색기에서 src 디렉터리를 펼치면 main과 test가 나옴. 
main을 펼치면 java와 resources가 나오는데, java에는 자바 코드가 저장되고,
 resources에는 외부 파일이 저장됨

자바 프로그램의 시작점인 메인 메서드는 java 디렉터리의 kr.or.ddit 안에 하나의 클래스로 존재함. 
kr.or.ddit는 앞서 스프링 프로젝트를 만들 때 설정한 기본 패키지임. 
이 기본 패키지에 있는 DditApplication을 열면 메인 메서드를 확인할 수 있음.

build > gradle ... default => idea 로 설정 바꾸기


서버에 접속할 때 사용하는 localhost:8030의 의미는?

localhost
실행 중인 서버의 주소 중 특별한 주소인 “내 컴퓨터”를 의미함. 마치 내가 사는 집을 “우리 집”이라고 표현하는 것과 같음. localhost를 IP주소로 변경하면 127.0.0.1이 됨.

8030
포트번호. localhost가 “우리 집”이라면 8030은 방 번호에 해당. 클라이언트가 8030번 방에 뭔가를 요청하는 것임. 8030번 방 안에는 스프링 부트가 동작하고 있음. 
톰켓이 8030번에서 수행되고 있다는 뜻. 톰켓은 웹 서버를 말하는 데, 스프링 부트는 이 톰켓에 담겨 실행됨. 

hello.html
서버에 요청하는 파일. 웹 브라우저(크롬)에서 localhost:8030/hello.html로 요청하면 내 컴퓨터의 8030번에서 수행되는 서버에 hello.html 파일을 요청함. 
이렇게 파일을 직접 지정할 경우 스프링 부트는 기본적으로 src > main > resources > static 디렉터리에서 파일을 찾음. 그리고, 찾은 HTML 코드를 응답으로 보냄

뷰 템플릿(View Template)은 화면을 담당하는 기술. 웹 페이지(View)를 하나의 틀(Template)로 만들고 여기에 변수를 삽입해 서로 다른 페이지로 보여줌.

화면을 담당하는 뷰 템플릿은 간단히 “뷰”라고 함. 뷰는 컨트롤러와 모델이라는 두 동료가 있음. 컨트롤러(Controller)는 클라이언트의 요청에 따라 서버에서 이를 처리하는 역할을 하고, 
모델(Model)은 데이터를 관리하는 역할을 함. 이처럼 웹 페이지를 화면에 보여 주고(View), 클라이언트의 요청을 받아 처리하고(Controller), 
데이터를 관리하는(Model) 역할을 나누는 기법을 MVC 패턴(Model-View-Controller Pattern)이라고 함.


확장자 mustache는 뷰 템플릿을 만드는 도구. 즉, 뷰 템플릿 엔진을 의미함. 머스테치 파일의 기본 위치는 src > main > resources > template 임. 
이 위치에 머스테치 파일을 저장하면 스프링 부트에서 자동으로 로딩함.
[참고] 머스테치 외의 템플릿 엔진으로는 Thymeleaf, JSP 등이 있음.

2. 머스테치(.mustache) 파일을 지원하는 플러그인을 발견했다고 뜸. 머스테치 플러그인을 설치하기 위해 Install Handlebars/Mustache plugin을 클릭. 

[참고] 어노테이션(annotation)이란? 소스 코드에 추가해 사용하는 메타 데이터의 일종. 메타 데이터는 프로그램에서 처리해야 할 데이터가 아니라 컴파일 및 실행 과정에서 코드를 어떻게 처리해야 할지 알려 주는 추가 정보. 자바에서 어노테이션은 앞에 @기호를 붙여 사용.

메타데이터
<데이터를 위한 데이터>
기본적인 데이터 예) 이름 등 과 비밀 데이터 예)나이(숫자형), 성별(문자형) 등을 말한다 >> 자료형 데이터라고도 말함(제약사항)

//Model? 모델은 MVC 패턴에서 데이터를 관리하는 역할을 함.



!! 패키지는 기본적으로 소문자
!! 클래스의 첫글자는 대문자
!! doc + tab => html 생성