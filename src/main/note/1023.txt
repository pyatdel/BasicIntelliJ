Spring Boot와 웹 개발 기초
1. 프로젝트 구조와 빌드
1.1 빌드(Build)의 개념

소스 코드를 실행 가능한 독립적 형태로 변환
결과물: 독립적으로 실행 가능한 파일
Gradle 설정:
build.gradle
idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}


1.2 프로젝트 구조
Copysrc/
├── main/
│   ├── java/         # Java 소스 코드
│   │   └── kr.or.ddit/
│   │       └── DditApplication.java
│   └── resources/    # 외부 파일
│       ├── static/   # 정적 파일 (HTML, CSS, JS)
│       └── templates/ # 뷰 템플릿 파일
└── test/             # 테스트 코드
2. 웹 서버 구성
2.1 localhost:8030 의미
Copylocalhost (127.0.0.1) - "내 컴퓨터"
      ↓
    8030 - 포트 번호 ("방 번호")
      ↓
    톰캣 서버 실행
      ↓
 Spring Boot 애플리케이션
2.2 정적 파일 처리

기본 경로: src/main/resources/static/
접근 예시: localhost:8030/hello.html

3. MVC 패턴
3.1 구성 요소
CopyModel (데이터 관리)
  ↑
  │
Controller (요청 처리) → View (화면 표시)
3.2 역할

Model

데이터 관리
비즈니스 로직 처리

javaCopy@Controller
public class HomeController {
    public String home(Model model) {
        model.addAttribute("data", "값");
        return "home";
    }
}

View (Template)

화면 표시 담당
Mustache(.mustache) 파일 사용
위치: src/main/resources/templates/

htmlCopy<!-- home.mustache -->
<h1>{{data}}</h1>

Controller

클라이언트 요청 처리
URL 매핑

javaCopy@Controller
public class HelloController {
    @GetMapping("/hello")
    public String hello() {
        return "hello";
    }
}


4. 개발 규칙과 팁
4.1 명명 규칙
Copy패키지명: 소문자 (예: kr.or.ddit)
클래스명: 대문자로 시작 (예: DditApplication)
4.2 메타데이터와 어노테이션

메타데이터: 데이터를 설명하는 데이터

예: 나이(숫자형), 성별(문자형)


어노테이션: @로 시작하는 메타데이터
javaCopy@Controller
@RequestMapping("/api")
public class ApiController {
    // ...
}


4.3 개발 도구 팁
htmlCopy<!-- HTML 기본 구조 생성 -->
doc + Tab ⌨️
↓
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Document</title>
</head>
<body>
    
</body>
</html>

Spring Boot는 Java 소스 코드와 리소스 파일을 구조화하여 관리하며,
MVC 패턴을 통해 데이터 관리(Model), 화면 표시(View),
요청 처리(Controller)를 분리하고, 톰캣 서버를 통해 웹 애플리케이션을
localhost:8030과 같은 특정 포트에서 실행합니다.