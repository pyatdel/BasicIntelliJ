Spring MVC와 데이터 처리
1. 스프링의 핵심 개념 ("스프링 삼각형")
1.1 PSA (Portable Service Abstraction)

환경과 세부 기술에 상관없이 일관된 방식으로 서비스 제공
예: JDBC, JPA, Hibernate 등을 추상화

1.2 POJO (Plain Old Java Object)

순수한 자바 객체 사용
특별한 규약에 종속되지 않는 객체

javaCopy// POJO 예시
public class User {
    private String name;
    private String email;

    // 기본 생성자
    public User() {}

    // getter/setter
    public String getName() {
        return name;
    }
}
1.3 IOC/DI (Inversion of Control/Dependency Injection)

객체 생성과 의존관계 관리를 Spring이 담당

javaCopy@Controller
public class UserController {
    // Spring이 자동으로 주입
    @Autowired
    private UserService userService;
}
1.4 AOP (Aspect Oriented Programming)

개발자는 비즈니스 로직에만 집중
공통 관심사는 분리하여 관리

javaCopy@Aspect
@Component
public class LoggingAspect {
    @Before("execution(* com.example.service.*.*(..))")
    public void logBefore() {
        // 메서드 실행 전 로깅
    }
}
2. 폼 데이터 처리 흐름
2.1 HTML Form
htmlCopy<form action="/articles/create" method="post">
    <input type="text" name="title">
    <textarea name="content"></textarea>
    <button type="submit">제출</button>
</form>
2.2 DTO (Data Transfer Object)
javaCopypublic class ArticleForm {
    private String title;
    private String content;

    // 생성자, getter/setter
}
2.3 Entity
javaCopy@Entity
public class Article {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;
    private String content;
}
2.4 데이터 흐름도
CopyForm Data → DTO → Entity → Repository → Database
    ↓         ↓      ↓          ↓          ↓
HTML Form → ArticleForm → Article → JPA → SQL
3. JPA (Java Persistence API)
3.1 특징

자바 객체와 데이터베이스 테이블 매핑
SQL 자동 생성

javaCopy@Repository
public interface ArticleRepository
    extends JpaRepository<Article, Long> {
    // 기본 CRUD 메서드 자동 제공
}
4. 개발 팁
4.1 코드 변경 시 대응
CopyJava 코드 변경 → 서버 재시작 필요
Mustache 변경 → 빌드(망치 아이콘)만 필요
4.2 View 처리 (Mustache)

서버 사이드 템플릿 엔진
포워딩 방식으로 처리

Controller
public class ArticleController {
    @GetMapping("/articles")
    public String index(Model model) {
        // 데이터를 모델에 추가
        model.addAttribute("articles", articleList);
        // 뷰 이름 반환
        return "articles/index";
    }
}

[스프링 삼각형]
    psa  pojo   ioc/di    aop
카톡 프사 좀 퍼줘 아이씨/디게 아파

 psa
 pojo   :본연의 자바 사용
 ioc/di :기존에는 new를 개발자가.. 이젠 new를 spring에서 / 의존성 주입
 aop    :개발자는 개발만!

 스프링은 POJO를 기반으로 PSA를 통해 일관된 서비스를 제공하며,
 IOC/DI로 객체 관리를 자동화하고, AOP로 핵심 로직과 부가 기능을 분리하여
 개발의 효율성을 극대화합니다.