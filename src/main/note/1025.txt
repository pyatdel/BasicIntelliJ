POJO와 H2 데이터베이스 활용 가이드
1. POJO (Plain Old Java Object)
1.1 개념
javaCopy// POJO 예시
public class Person {
    private String name;
    private int age;

    // 기본 생성자
    public Person() {}

    // Getter/Setter
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
}
1.2 POJO의 특징

특정 프레임워크에 종속되지 않음
순수한 자바 객체
상속 강제하지 않음
인터페이스 구현 강제하지 않음

1.3 장점
javaCopy// 비POJO 예시 (프레임워크 종속)
public class PersonController extends BaseController {
    @Override
    public void doSomething() {
        // 프레임워크에 종속된 메서드
    }
}

// POJO 예시 (독립적)
public class Person {
    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
2. H2 데이터베이스
2.1 특징

인메모리 데이터베이스
개발 및 테스트용으로 적합
Spring Boot 내장 지원

2.2 설정 방법
yamlCopy# application.properties 또는 application.yml
spring:
  h2:
    console:
      enabled: true
      path: /h2-console
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:
2.3 접속 방법
CopyURL: http://localhost:8030/h2-console

접속 정보:
Driver Class: org.h2.Driver
JDBC URL: jdbc:h2:mem:testdb
User Name: sa
Password: [빈값]
2.4 기본 SQL 예시
sqlCopy-- 테이블 생성
CREATE TABLE article (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255),
    content TEXT
);

-- 데이터 조회
SELECT * FROM article;

-- 데이터 삽입
INSERT INTO article (title, content)
VALUES ('제목', '내용');
2.5 Spring Boot JPA 연동
javaCopy@Entity
@Table(name = "article")
public class Article {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;
    private String content;
}
3. 버전 호환성 관리
3.1 의존성 관리
gradleCopy// build.gradle
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.7.0'
    runtimeOnly 'com.h2database:h2:2.1.214'
}
3.2 버전 호환성 체크
javaCopy// 버전 체크 유틸리티
public class VersionChecker {
    public static boolean isCompatible() {
        String javaVersion = System.getProperty("java.version");
        String springVersion = SpringVersion.getVersion();

        // 버전 호환성 검사 로직
        return checkVersionCompatibility(javaVersion, springVersion);
    }
}
3.3 대체 구현 준비
javaCopy// 인터페이스 정의
public interface DatabaseService {
    void saveData(Object data);
}

// H2 구현
@Profile("dev")
@Service
public class H2DatabaseService implements DatabaseService {
    @Override
    public void saveData(Object data) {
        // H2 데이터베이스 저장 로직
    }
}

// 대체 구현
@Profile("prod")
@Service
public class MySQLDatabaseService implements DatabaseService {
    @Override
    public void saveData(Object data) {
        // MySQL 데이터베이스 저장 로직
    }
}
3.4 테스트 코드 작성
javaCopy@SpringBootTest
class ArticleRepositoryTest {
    @Autowired
    private ArticleRepository articleRepository;

    @Test
    void testH2Connection() {
        // Given
        Article article = new Article("제목", "내용");

        // When
        Article saved = articleRepository.save(article);

        // Then
        assertThat(saved.getId()).isNotNull();
        assertThat(saved.getTitle()).isEqualTo("제목");
    }
}

POJO는 특정 프레임워크에 종속되지 않는 순수한 자바 객체를 의미하며,
H2는 Spring Boot에 내장된 인메모리 데이터베이스로,
개발 및 테스트 환경에서 쉽게 설정하고 JPA와 연동하여 사용할 수 있습니다.