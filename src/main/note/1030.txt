REST API와 시스템 아키텍처
1. JSON (JavaScript Object Notation)
1.1 기본 구조
{
    "key1": "value1",
    "key2": 42,
    "key3": {
        "nestedKey": "nestedValue"
    },
    "key4": [1, 2, 3],
    "key5": {
        "array": ["a", "b", "c"],
        "object": {
            "x": 1,
            "y": 2
        }
    }
}
1.2 특징

키-값 쌍으로 구성
중첩 객체 사용 가능
배열 사용 가능
언어 독립적 데이터 포맷

2. REST API
2.1 개념 정의
REST = REpresentational State Transfer
- HTTP URL로 자원(Resource) 명시
- HTTP Method로 CRUD 수행
2.2 URL 설계 규칙
Copy# 기본 URL 패턴
/articles           # 전체 게시글
/articles/{id}      # 특정 게시글

# HTTP Method 매핑
GET    /articles    # 목록 조회
POST   /articles    # 새글 작성
GET    /articles/1  # 1번 글 조회
PATCH  /articles/1  # 1번 글 수정
DELETE /articles/1  # 1번 글 삭제
3. 컨트롤러 타입 비교
3.1 REST 컨트롤러
@RestController  // 데이터(JSON) 반환
public class ArticleApiController {
    @GetMapping("/api/articles")
    public List<Article> index() {
        return articleRepository.findAll();
    }
}
3.2 일반 컨트롤러
@Controller  // View 페이지 반환
public class ArticleController {
    @GetMapping("/articles")
    public String index(Model model) {
        model.addAttribute("articles", articleRepository.findAll());
        return "articles/index";
    }
}
4. 시스템 계층 구조
4.1 전체 아키텍처
Client → Server → Database
         ↓
    [서버 내부 계층]
    - Controller (요청/응답 처리)
    - Service (비즈니스 로직)
    - Repository (데이터 접근)
4.2 데이터 흐름
CopyDatabase → Repository → Entity → DTO → Client
4.3 계층별 역할
// 컨트롤러 계층
@RestController
public class ArticleApiController {
    @Autowired
    private ArticleService articleService;

    @GetMapping("/api/articles/{id}")
    public ArticleDto getArticle(@PathVariable Long id) {
        return articleService.getArticle(id);
    }
}

// 서비스 계층
@Service
public class ArticleService {
    @Autowired
    private ArticleRepository articleRepository;

    public ArticleDto getArticle(Long id) {
        Article entity = articleRepository.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Article not found"));
        return ArticleDto.fromEntity(entity);
    }
}

// 리포지토리 계층
@Repository
public interface ArticleRepository 
    extends JpaRepository<Article, Long> {
    // JPA가 기본 CRUD 메서드 제공
}
5. 데이터 변환
5.1 Entity와 DTO
// Entity (DB 테이블과 매핑)
@Entity
public class Article {
    @Id
    @GeneratedValue
    private Long id;
    private String title;
    private String content;
}

// DTO (데이터 전송 객체)
public class ArticleDto {
    private Long id;
    private String title;
    private String content;

    // Entity → DTO 변환
    public static ArticleDto fromEntity(Article entity) {
        return new ArticleDto(
            entity.getId(),
            entity.getTitle(),
            entity.getContent()
        );
    }

    // DTO → Entity 변환
    public Article toEntity() {
        return new Article(id, title, content);
    }
}
6. API 활용 예시
6.1 공공데이터 포털 연동
@RestController
public class PublicDataController {
    @GetMapping("/api/public-data")
    public ResponseEntity<String> getPublicData() {
        String apiKey = "your-api-key";
        String url = "public-api-url" + "?serviceKey=" + apiKey;
        
        // API 호출 및 데이터 반환
        RestTemplate restTemplate = new RestTemplate();
        return restTemplate.getForEntity(url, String.class);
    }
}

REST API는 HTTP 메서드와 URL을 통해 리소스를 처리하며,
컨트롤러, 서비스, 리포지토리 계층 구조로 구성되어 JSON 형식으로
데이터를 주고받고, Entity와 DTO를 통해 데이터베이스와 클라이언트 간의
데이터를 변환하여 처리합니다.