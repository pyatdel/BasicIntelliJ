REST API와 데이터베이스 작업
1. HTTP 메서드와 CRUD 작업
1.1 기본 매핑
조회(Read)   : GET    - DB 변경 없음
생성(Create) : POST   - 새 데이터 추가
수정(Update) : PATCH  - 데이터 수정
삭제(Delete) : DELETE - 데이터 삭제
1.2 실제 구현
@RestController
public class ArticleApiController {
    // 조회
    @GetMapping("/api/articles/{id}")
    public Article show(@PathVariable Long id) {
        return articleRepository.findById(id).orElse(null);
    }
    
    // 생성
    @PostMapping("/api/articles")
    public Article create(@RequestBody ArticleForm form) {
        Article article = form.toEntity();
        return articleRepository.save(article);
    }
    
    // 수정 (PUT/PATCH → POST로 대체 가능)
    @PostMapping("/api/articles/{id}/update")
    public Article update(@PathVariable Long id, 
                         @RequestBody ArticleForm form) {
        Article article = form.toEntity();
        article.setId(id);
        return articleRepository.save(article);
    }
    
    // 삭제
    @DeleteMapping("/api/articles/{id}")
    public ResponseEntity<Article> delete(@PathVariable Long id) {
        Article target = articleRepository.findById(id).orElse(null);
        if (target == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
        articleRepository.delete(target);
        return ResponseEntity.status(HttpStatus.OK).build();
    }
}
2. 데이터 전달 방식
2.1 Forwarding vs Redirect
// Forwarding - 데이터 유지
return "articles/show";  

// Redirect - 새로운 요청
return "redirect:/articles";

// Flash Attributes로 redirect 시 데이터 전달
@PostMapping("/articles/delete")
public String delete(RedirectAttributes rttr) {
    rttr.addFlashAttribute("message", "삭제 완료!");
    return "redirect:/articles";
}
3. 로깅 설정
3.1 로그 레벨
높음 ↑
FATAL  - 치명적인 에러
ERROR  - 일반 에러
WARN   - 경고
INFO   - 정보
DEBUG  - 상세 정보
TRACE  - 모든 정보
낮음 ↓
3.2 application.properties 설정
propertiesCopy# JPA 쿼리 로깅
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# 일반 로깅
logging.level.com.example.demo=DEBUG
4. REST API 개념
4.1 기본 원칙
Copy1. 자원 중심의 URL 설계
2. HTTP 메서드로 작업 구분
3. 상태를 저장하지 않음 (Stateless)
4. 클라이언트-서버 분리
4.2 URL 설계 예시
# 좋은 예시
GET    /articles      # 목록 조회
POST   /articles      # 생성
GET    /articles/1    # 개별 조회
PATCH  /articles/1    # 수정
DELETE /articles/1    # 삭제

# 나쁜 예시
GET    /getArticles
POST   /createArticle
GET    /showArticle/1
5. JSON 데이터 처리
5.1 기본 구조
{
    "id": 1,
    "title": "제목",
    "content": "내용"
}
5.2 Controller에서의 처리
@GetMapping("/api/articles")
public ResponseEntity<List<Article>> index() {
    List<Article> articles = articleRepository.findAll();
    return ResponseEntity.ok(articles);
}
6. 데이터베이스 키 개념
6.1 Primary Key (기본 키)
@Entity
public class Article {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;  // 기본 키
    
    private String title;
    private String content;
}
6.2 특징

유일성: 중복된 값을 가질 수 없음
불변성: 한번 할당된 값은 변경 불가
필수성: NULL 값을 가질 수 없음

7. DTO와 Entity 변환
7.1 데이터 흐름
요청 → DTO → Entity → Database
Database → Entity → JSON → HTTP 응답
7.2 코드 예시
javaCopy// DTO
public class ArticleForm {
    private String title;
    private String content;
    
    public Article toEntity() {
        return new Article(null, title, content);
    }
}

// Entity
@Entity
public class Article {
    @Id
    @GeneratedValue
    private Long id;
    private String title;
    private String content;
}

REST API는 HTTP 메서드(GET/POST/PATCH/DELETE)를 통해
리소스를 처리하고, JSON 형식으로 데이터를 주고받으며,
DTO와 Entity를 통해 클라이언트 요청을 데이터베이스에 저장하고,
포워딩이나 리다이렉트를 통해 페이지를 이동합니다.